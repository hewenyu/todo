// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hewenyu/todo/ent/predicate"
	"github.com/hewenyu/todo/ent/temple"
	"github.com/hewenyu/todo/ent/user"
)

// TempleUpdate is the builder for updating Temple entities.
type TempleUpdate struct {
	config
	hooks    []Hook
	mutation *TempleMutation
}

// Where appends a list predicates to the TempleUpdate builder.
func (tu *TempleUpdate) Where(ps ...predicate.Temple) *TempleUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TempleUpdate) SetUpdatedAt(t time.Time) *TempleUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TempleUpdate) ClearUpdatedAt() *TempleUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TempleUpdate) SetStatus(t temple.Status) *TempleUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TempleUpdate) SetNillableStatus(t *temple.Status) *TempleUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetDeleteAt sets the "delete_at" field.
func (tu *TempleUpdate) SetDeleteAt(ta temple.DeleteAt) *TempleUpdate {
	tu.mutation.SetDeleteAt(ta)
	return tu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tu *TempleUpdate) SetNillableDeleteAt(ta *temple.DeleteAt) *TempleUpdate {
	if ta != nil {
		tu.SetDeleteAt(*ta)
	}
	return tu
}

// SetText sets the "text" field.
func (tu *TempleUpdate) SetText(s string) *TempleUpdate {
	tu.mutation.SetText(s)
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TempleUpdate) SetPriority(i int) *TempleUpdate {
	tu.mutation.ResetPriority()
	tu.mutation.SetPriority(i)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TempleUpdate) SetNillablePriority(i *int) *TempleUpdate {
	if i != nil {
		tu.SetPriority(*i)
	}
	return tu
}

// AddPriority adds i to the "priority" field.
func (tu *TempleUpdate) AddPriority(i int) *TempleUpdate {
	tu.mutation.AddPriority(i)
	return tu
}

// AddChildIDs adds the "children" edge to the Temple entity by IDs.
func (tu *TempleUpdate) AddChildIDs(ids ...uint64) *TempleUpdate {
	tu.mutation.AddChildIDs(ids...)
	return tu
}

// AddChildren adds the "children" edges to the Temple entity.
func (tu *TempleUpdate) AddChildren(t ...*Temple) *TempleUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Temple entity by ID.
func (tu *TempleUpdate) SetParentID(id uint64) *TempleUpdate {
	tu.mutation.SetParentID(id)
	return tu
}

// SetNillableParentID sets the "parent" edge to the Temple entity by ID if the given value is not nil.
func (tu *TempleUpdate) SetNillableParentID(id *uint64) *TempleUpdate {
	if id != nil {
		tu = tu.SetParentID(*id)
	}
	return tu
}

// SetParent sets the "parent" edge to the Temple entity.
func (tu *TempleUpdate) SetParent(t *Temple) *TempleUpdate {
	return tu.SetParentID(t.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TempleUpdate) SetOwnerID(id uint64) *TempleUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tu *TempleUpdate) SetNillableOwnerID(id *uint64) *TempleUpdate {
	if id != nil {
		tu = tu.SetOwnerID(*id)
	}
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TempleUpdate) SetOwner(u *User) *TempleUpdate {
	return tu.SetOwnerID(u.ID)
}

// Mutation returns the TempleMutation object of the builder.
func (tu *TempleUpdate) Mutation() *TempleMutation {
	return tu.mutation
}

// ClearChildren clears all "children" edges to the Temple entity.
func (tu *TempleUpdate) ClearChildren() *TempleUpdate {
	tu.mutation.ClearChildren()
	return tu
}

// RemoveChildIDs removes the "children" edge to Temple entities by IDs.
func (tu *TempleUpdate) RemoveChildIDs(ids ...uint64) *TempleUpdate {
	tu.mutation.RemoveChildIDs(ids...)
	return tu
}

// RemoveChildren removes "children" edges to Temple entities.
func (tu *TempleUpdate) RemoveChildren(t ...*Temple) *TempleUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Temple entity.
func (tu *TempleUpdate) ClearParent() *TempleUpdate {
	tu.mutation.ClearParent()
	return tu
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TempleUpdate) ClearOwner() *TempleUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TempleUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks[int, TempleMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TempleUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TempleUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TempleUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TempleUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := temple.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TempleUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := temple.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Temple.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.DeleteAt(); ok {
		if err := temple.DeleteAtValidator(v); err != nil {
			return &ValidationError{Name: "delete_at", err: fmt.Errorf(`ent: validator failed for field "Temple.delete_at": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Text(); ok {
		if err := temple.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Temple.text": %w`, err)}
		}
	}
	return nil
}

func (tu *TempleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temple.Table,
			Columns: temple.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: temple.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(temple.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(temple.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(temple.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(temple.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.DeleteAt(); ok {
		_spec.SetField(temple.FieldDeleteAt, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Text(); ok {
		_spec.SetField(temple.FieldText, field.TypeString, value)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(temple.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedPriority(); ok {
		_spec.AddField(temple.FieldPriority, field.TypeInt, value)
	}
	if tu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   temple.ParentTable,
			Columns: []string{temple.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   temple.ParentTable,
			Columns: []string{temple.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temple.OwnerTable,
			Columns: []string{temple.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temple.OwnerTable,
			Columns: []string{temple.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temple.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TempleUpdateOne is the builder for updating a single Temple entity.
type TempleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TempleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TempleUpdateOne) SetUpdatedAt(t time.Time) *TempleUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TempleUpdateOne) ClearUpdatedAt() *TempleUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TempleUpdateOne) SetStatus(t temple.Status) *TempleUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TempleUpdateOne) SetNillableStatus(t *temple.Status) *TempleUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetDeleteAt sets the "delete_at" field.
func (tuo *TempleUpdateOne) SetDeleteAt(ta temple.DeleteAt) *TempleUpdateOne {
	tuo.mutation.SetDeleteAt(ta)
	return tuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tuo *TempleUpdateOne) SetNillableDeleteAt(ta *temple.DeleteAt) *TempleUpdateOne {
	if ta != nil {
		tuo.SetDeleteAt(*ta)
	}
	return tuo
}

// SetText sets the "text" field.
func (tuo *TempleUpdateOne) SetText(s string) *TempleUpdateOne {
	tuo.mutation.SetText(s)
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TempleUpdateOne) SetPriority(i int) *TempleUpdateOne {
	tuo.mutation.ResetPriority()
	tuo.mutation.SetPriority(i)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TempleUpdateOne) SetNillablePriority(i *int) *TempleUpdateOne {
	if i != nil {
		tuo.SetPriority(*i)
	}
	return tuo
}

// AddPriority adds i to the "priority" field.
func (tuo *TempleUpdateOne) AddPriority(i int) *TempleUpdateOne {
	tuo.mutation.AddPriority(i)
	return tuo
}

// AddChildIDs adds the "children" edge to the Temple entity by IDs.
func (tuo *TempleUpdateOne) AddChildIDs(ids ...uint64) *TempleUpdateOne {
	tuo.mutation.AddChildIDs(ids...)
	return tuo
}

// AddChildren adds the "children" edges to the Temple entity.
func (tuo *TempleUpdateOne) AddChildren(t ...*Temple) *TempleUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Temple entity by ID.
func (tuo *TempleUpdateOne) SetParentID(id uint64) *TempleUpdateOne {
	tuo.mutation.SetParentID(id)
	return tuo
}

// SetNillableParentID sets the "parent" edge to the Temple entity by ID if the given value is not nil.
func (tuo *TempleUpdateOne) SetNillableParentID(id *uint64) *TempleUpdateOne {
	if id != nil {
		tuo = tuo.SetParentID(*id)
	}
	return tuo
}

// SetParent sets the "parent" edge to the Temple entity.
func (tuo *TempleUpdateOne) SetParent(t *Temple) *TempleUpdateOne {
	return tuo.SetParentID(t.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TempleUpdateOne) SetOwnerID(id uint64) *TempleUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tuo *TempleUpdateOne) SetNillableOwnerID(id *uint64) *TempleUpdateOne {
	if id != nil {
		tuo = tuo.SetOwnerID(*id)
	}
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TempleUpdateOne) SetOwner(u *User) *TempleUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// Mutation returns the TempleMutation object of the builder.
func (tuo *TempleUpdateOne) Mutation() *TempleMutation {
	return tuo.mutation
}

// ClearChildren clears all "children" edges to the Temple entity.
func (tuo *TempleUpdateOne) ClearChildren() *TempleUpdateOne {
	tuo.mutation.ClearChildren()
	return tuo
}

// RemoveChildIDs removes the "children" edge to Temple entities by IDs.
func (tuo *TempleUpdateOne) RemoveChildIDs(ids ...uint64) *TempleUpdateOne {
	tuo.mutation.RemoveChildIDs(ids...)
	return tuo
}

// RemoveChildren removes "children" edges to Temple entities.
func (tuo *TempleUpdateOne) RemoveChildren(t ...*Temple) *TempleUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Temple entity.
func (tuo *TempleUpdateOne) ClearParent() *TempleUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TempleUpdateOne) ClearOwner() *TempleUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TempleUpdateOne) Select(field string, fields ...string) *TempleUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Temple entity.
func (tuo *TempleUpdateOne) Save(ctx context.Context) (*Temple, error) {
	tuo.defaults()
	return withHooks[*Temple, TempleMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TempleUpdateOne) SaveX(ctx context.Context) *Temple {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TempleUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TempleUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TempleUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := temple.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TempleUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := temple.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Temple.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.DeleteAt(); ok {
		if err := temple.DeleteAtValidator(v); err != nil {
			return &ValidationError{Name: "delete_at", err: fmt.Errorf(`ent: validator failed for field "Temple.delete_at": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Text(); ok {
		if err := temple.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Temple.text": %w`, err)}
		}
	}
	return nil
}

func (tuo *TempleUpdateOne) sqlSave(ctx context.Context) (_node *Temple, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temple.Table,
			Columns: temple.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: temple.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Temple.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temple.FieldID)
		for _, f := range fields {
			if !temple.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != temple.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(temple.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(temple.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(temple.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(temple.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.DeleteAt(); ok {
		_spec.SetField(temple.FieldDeleteAt, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Text(); ok {
		_spec.SetField(temple.FieldText, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(temple.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedPriority(); ok {
		_spec.AddField(temple.FieldPriority, field.TypeInt, value)
	}
	if tuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   temple.ParentTable,
			Columns: []string{temple.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   temple.ParentTable,
			Columns: []string{temple.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temple.OwnerTable,
			Columns: []string{temple.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temple.OwnerTable,
			Columns: []string{temple.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Temple{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temple.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
