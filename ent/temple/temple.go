// Code generated by ent, DO NOT EDIT.

package temple

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the temple type in the database.
	Label = "temple"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the temple in the database.
	Table = "temple"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "temple"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "temple_parent"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "temple"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "temple_parent"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "temple"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "user"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_todos"
)

// Columns holds all SQL columns for temple fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldDeleteAt,
	FieldText,
	FieldPriority,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "temple"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"temple_parent",
	"user_todos",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInProgress is the default value of the Status enum.
const DefaultStatus = StatusInProgress

// Status values.
const (
	StatusInProgress Status = "IN_PROGRESS"
	StatusCompleted  Status = "COMPLETED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInProgress, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("temple: invalid enum value for status field: %q", s)
	}
}

// DeleteAt defines the type for the "delete_at" enum field.
type DeleteAt string

// DeleteAtEnable is the default value of the DeleteAt enum.
const DefaultDeleteAt = DeleteAtEnable

// DeleteAt values.
const (
	DeleteAtEnable  DeleteAt = "ENABLE"
	DeleteAtDisable DeleteAt = "DISABLE"
)

func (da DeleteAt) String() string {
	return string(da)
}

// DeleteAtValidator is a validator for the "delete_at" field enum values. It is called by the builders before save.
func DeleteAtValidator(da DeleteAt) error {
	switch da {
	case DeleteAtEnable, DeleteAtDisable:
		return nil
	default:
		return fmt.Errorf("temple: invalid enum value for delete_at field: %q", da)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DeleteAt) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DeleteAt) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DeleteAt(str)
	if err := DeleteAtValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DeleteAt", str)
	}
	return nil
}
