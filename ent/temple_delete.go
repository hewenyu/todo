// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hewenyu/todo/ent/predicate"
	"github.com/hewenyu/todo/ent/temple"
)

// TempleDelete is the builder for deleting a Temple entity.
type TempleDelete struct {
	config
	hooks    []Hook
	mutation *TempleMutation
}

// Where appends a list predicates to the TempleDelete builder.
func (td *TempleDelete) Where(ps ...predicate.Temple) *TempleDelete {
	td.mutation.Where(ps...)
	return td
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (td *TempleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TempleMutation](ctx, td.sqlExec, td.mutation, td.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (td *TempleDelete) ExecX(ctx context.Context) int {
	n, err := td.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (td *TempleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: temple.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: temple.FieldID,
			},
		},
	}
	if ps := td.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, td.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	td.mutation.done = true
	return affected, err
}

// TempleDeleteOne is the builder for deleting a single Temple entity.
type TempleDeleteOne struct {
	td *TempleDelete
}

// Where appends a list predicates to the TempleDelete builder.
func (tdo *TempleDeleteOne) Where(ps ...predicate.Temple) *TempleDeleteOne {
	tdo.td.mutation.Where(ps...)
	return tdo
}

// Exec executes the deletion query.
func (tdo *TempleDeleteOne) Exec(ctx context.Context) error {
	n, err := tdo.td.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{temple.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tdo *TempleDeleteOne) ExecX(ctx context.Context) {
	if err := tdo.Exec(ctx); err != nil {
		panic(err)
	}
}
