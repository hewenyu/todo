// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hewenyu/todo/ent/temple"
	"github.com/hewenyu/todo/ent/user"
)

// TempleCreate is the builder for creating a Temple entity.
type TempleCreate struct {
	config
	mutation *TempleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TempleCreate) SetCreatedAt(t time.Time) *TempleCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TempleCreate) SetNillableCreatedAt(t *time.Time) *TempleCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TempleCreate) SetUpdatedAt(t time.Time) *TempleCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TempleCreate) SetNillableUpdatedAt(t *time.Time) *TempleCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TempleCreate) SetStatus(t temple.Status) *TempleCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TempleCreate) SetNillableStatus(t *temple.Status) *TempleCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetDeleteAt sets the "delete_at" field.
func (tc *TempleCreate) SetDeleteAt(ta temple.DeleteAt) *TempleCreate {
	tc.mutation.SetDeleteAt(ta)
	return tc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tc *TempleCreate) SetNillableDeleteAt(ta *temple.DeleteAt) *TempleCreate {
	if ta != nil {
		tc.SetDeleteAt(*ta)
	}
	return tc
}

// SetText sets the "text" field.
func (tc *TempleCreate) SetText(s string) *TempleCreate {
	tc.mutation.SetText(s)
	return tc
}

// SetPriority sets the "priority" field.
func (tc *TempleCreate) SetPriority(i int) *TempleCreate {
	tc.mutation.SetPriority(i)
	return tc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tc *TempleCreate) SetNillablePriority(i *int) *TempleCreate {
	if i != nil {
		tc.SetPriority(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TempleCreate) SetID(u uint64) *TempleCreate {
	tc.mutation.SetID(u)
	return tc
}

// AddChildIDs adds the "children" edge to the Temple entity by IDs.
func (tc *TempleCreate) AddChildIDs(ids ...uint64) *TempleCreate {
	tc.mutation.AddChildIDs(ids...)
	return tc
}

// AddChildren adds the "children" edges to the Temple entity.
func (tc *TempleCreate) AddChildren(t ...*Temple) *TempleCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Temple entity by ID.
func (tc *TempleCreate) SetParentID(id uint64) *TempleCreate {
	tc.mutation.SetParentID(id)
	return tc
}

// SetNillableParentID sets the "parent" edge to the Temple entity by ID if the given value is not nil.
func (tc *TempleCreate) SetNillableParentID(id *uint64) *TempleCreate {
	if id != nil {
		tc = tc.SetParentID(*id)
	}
	return tc
}

// SetParent sets the "parent" edge to the Temple entity.
func (tc *TempleCreate) SetParent(t *Temple) *TempleCreate {
	return tc.SetParentID(t.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tc *TempleCreate) SetOwnerID(id uint64) *TempleCreate {
	tc.mutation.SetOwnerID(id)
	return tc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tc *TempleCreate) SetNillableOwnerID(id *uint64) *TempleCreate {
	if id != nil {
		tc = tc.SetOwnerID(*id)
	}
	return tc
}

// SetOwner sets the "owner" edge to the User entity.
func (tc *TempleCreate) SetOwner(u *User) *TempleCreate {
	return tc.SetOwnerID(u.ID)
}

// Mutation returns the TempleMutation object of the builder.
func (tc *TempleCreate) Mutation() *TempleMutation {
	return tc.mutation
}

// Save creates the Temple in the database.
func (tc *TempleCreate) Save(ctx context.Context) (*Temple, error) {
	tc.defaults()
	return withHooks[*Temple, TempleMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TempleCreate) SaveX(ctx context.Context) *Temple {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TempleCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TempleCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TempleCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := temple.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := temple.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := temple.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.DeleteAt(); !ok {
		v := temple.DefaultDeleteAt
		tc.mutation.SetDeleteAt(v)
	}
	if _, ok := tc.mutation.Priority(); !ok {
		v := temple.DefaultPriority
		tc.mutation.SetPriority(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TempleCreate) check() error {
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Temple.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := temple.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Temple.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "Temple.delete_at"`)}
	}
	if v, ok := tc.mutation.DeleteAt(); ok {
		if err := temple.DeleteAtValidator(v); err != nil {
			return &ValidationError{Name: "delete_at", err: fmt.Errorf(`ent: validator failed for field "Temple.delete_at": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Temple.text"`)}
	}
	if v, ok := tc.mutation.Text(); ok {
		if err := temple.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Temple.text": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Temple.priority"`)}
	}
	return nil
}

func (tc *TempleCreate) sqlSave(ctx context.Context) (*Temple, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TempleCreate) createSpec() (*Temple, *sqlgraph.CreateSpec) {
	var (
		_node = &Temple{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: temple.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: temple.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(temple.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(temple.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(temple.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.DeleteAt(); ok {
		_spec.SetField(temple.FieldDeleteAt, field.TypeEnum, value)
		_node.DeleteAt = value
	}
	if value, ok := tc.mutation.Text(); ok {
		_spec.SetField(temple.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := tc.mutation.Priority(); ok {
		_spec.SetField(temple.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if nodes := tc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   temple.ChildrenTable,
			Columns: []string{temple.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   temple.ParentTable,
			Columns: []string{temple.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: temple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.temple_parent = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temple.OwnerTable,
			Columns: []string{temple.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_todos = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TempleCreateBulk is the builder for creating many Temple entities in bulk.
type TempleCreateBulk struct {
	config
	builders []*TempleCreate
}

// Save creates the Temple entities in the database.
func (tcb *TempleCreateBulk) Save(ctx context.Context) ([]*Temple, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Temple, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TempleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TempleCreateBulk) SaveX(ctx context.Context) []*Temple {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TempleCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TempleCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
