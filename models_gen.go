// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package todo

import (
	"fmt"
	"io"
	"strconv"
)

type TempleDeleteAt string

const (
	TempleDeleteAtEnable  TempleDeleteAt = "ENABLE"
	TempleDeleteAtDisable TempleDeleteAt = "DISABLE"
)

var AllTempleDeleteAt = []TempleDeleteAt{
	TempleDeleteAtEnable,
	TempleDeleteAtDisable,
}

func (e TempleDeleteAt) IsValid() bool {
	switch e {
	case TempleDeleteAtEnable, TempleDeleteAtDisable:
		return true
	}
	return false
}

func (e TempleDeleteAt) String() string {
	return string(e)
}

func (e *TempleDeleteAt) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TempleDeleteAt(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TempleDeleteAt", str)
	}
	return nil
}

func (e TempleDeleteAt) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Define an enumeration type and map it later to Ent enum (Go type).
// https://graphql.org/learn/schema/#enumeration-types
type TempleStatus string

const (
	TempleStatusInProgress TempleStatus = "IN_PROGRESS"
	TempleStatusCompleted  TempleStatus = "COMPLETED"
)

var AllTempleStatus = []TempleStatus{
	TempleStatusInProgress,
	TempleStatusCompleted,
}

func (e TempleStatus) IsValid() bool {
	switch e {
	case TempleStatusInProgress, TempleStatusCompleted:
		return true
	}
	return false
}

func (e TempleStatus) String() string {
	return string(e)
}

func (e *TempleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TempleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TempleStatus", str)
	}
	return nil
}

func (e TempleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserDeleteAt string

const (
	UserDeleteAtEnable  UserDeleteAt = "ENABLE"
	UserDeleteAtDisable UserDeleteAt = "DISABLE"
)

var AllUserDeleteAt = []UserDeleteAt{
	UserDeleteAtEnable,
	UserDeleteAtDisable,
}

func (e UserDeleteAt) IsValid() bool {
	switch e {
	case UserDeleteAtEnable, UserDeleteAtDisable:
		return true
	}
	return false
}

func (e UserDeleteAt) String() string {
	return string(e)
}

func (e *UserDeleteAt) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserDeleteAt(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserDeleteAt", str)
	}
	return nil
}

func (e UserDeleteAt) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusInProgress UserStatus = "IN_PROGRESS"
	UserStatusCompleted  UserStatus = "COMPLETED"
)

var AllUserStatus = []UserStatus{
	UserStatusInProgress,
	UserStatusCompleted,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusInProgress, UserStatusCompleted:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
